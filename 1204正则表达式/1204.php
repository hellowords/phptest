<?php
/*
	 正则表达式：
		一.定界符 / / 或者 ? ? { } 等等
		二.原子 如果有意义的字符，想作为原子统统使用’\‘转义字符
			在正则表达式中可以直接使用一些有范围的原子：	
			\d 表示任意一个十进制的数字
			\D 表示任意一个除数字之外的字符
			\s 表示任意一个空白
			\S 表示任意一个非空白
			\w 表示任意一个字 a-z A-Z 0-9 包括下划线_
			\W 表示任意一个非字。
			同时自己可以自定义一个原子表[ ] 可以匹配方括号中的任何一个，不一定需要整体匹配 
			[^] 表示取反！除了原子表中的原子都可以。^ 必须在[]内的地一个字符处出现
			[6-8]	自己定义一个范围
		三.元字符 用来修饰原子用的，不可以单独出现，是一类特殊的字符
		*	表示其前一个原子可以出现0次，一次，或者多次；
		+	表示其钱一个原子可以出现一次，或多次，至少要有一个
		?	表示其前面的原子可以出现0次，或1次，不能出现多次。只能有一次，要么没有
		{} 用于自定义出现次数
				{m} 表示一个整数,{2}表示前面的原子出现的2次
				{m.n} {2,8} 表示前面出现的原子，最少2次，最多8次
				{m,} 表示前面的原子最少出现m次以上，上不封顶
		. 默认情况下，表示除换行符外任意字符
		.* 表示任意一个字符，   
		.+ 表示至少任意一个字符
		^ 直接在一个正则表达式中最前面出现，表示正则表达式必须以这个开始
		$ 直接在正则表达式最后面出现表示正则表达式必须已这个结束
		| 或的关系，优先级最低，/hallo|halo/ 这表现的是 hallo与halo 不是o|h;
		\b 表示一个边界
		\B 表示一个非边界
		() 重点！
				1.变为一个大原子 /(asd)+/ asd 必须要出现一次以上
				2.改变优先级 /hell(o|h)alo/ o 与 h 或的关系
				3.作为子模式使用，正则表达式不先对一个字符串匹配一次，全部匹配作为一个大模式，放到数组的地一个元素中,每一个()子模式按顺序放到数组的其他元素中去
				4.可以取消子模式，就将()作为大原子或改变优先级使用，在括号中最前面使用“?:” 就可以取消这个
				5.反向引用，可以在模式中直接将子模式取出来，在作为正则表达式模式的一部分，如果在正则表达式中如替换函数preg_replace函数中可以将子模式取出，在被替换的字符串中使用。
				\1 :取地一个子模式,  \2 取第二个子模式...  \6取第六个子模式。
				在双引号中需要多\\来使用，单引号就不需要了， "\\6"  OR '\6'
			四. 模式修正符号 ： 
						1. 几个字母。
						2. 可以一次使用几个，没一个具有一定的意义，可以连续使用多个
						3. 是对整个正则表达式调优使用，可以说是对正则表达式功能的扩展
							i : 表示在和模式进行匹配，不区分大小写
							m : 默认情况，将字符串视为一行， ^ $ 视为多行后，任何一行都可以以正则开始或结束.
							s : 如果没有使用这个模式修正符号时，元字符中的"." 默认不能表示换行符号，将字符串视为单行.
							x : 表示模式中的空白忽略不计
							e : 正则表达式必须使用在preg_replace 替换字符串函数时使用
							U : 正则表达式中 .* .+ 都是贪婪模式，U目的是取消贪婪模式
									或者使用? 来限制贪婪模式; .*? .+? 
									上面两种是负负得正
			*/
$a="/\<(img)\s.+\>/i";
$str="<img src=http>";
$arr="";
if(preg_match($a,$str,$arr)){
	echo "nihao";
	echo '<pre>';
	 print_r($arr);
	echo '</pre>';
}else{
	echo "No";
}
